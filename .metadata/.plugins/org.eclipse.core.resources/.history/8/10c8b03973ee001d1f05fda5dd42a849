package principal.tela;

import java.util.Scanner;

import principal.controller.CadastroClientes;
import principal.controller.CadastroProduto;
import principal.controller.ControlePedidos;
import principal.db.BancoDeDados;
import principal.modelo.Cliente;
import principal.modelo.Pedido;
import principal.modelo.Produto;
import principal.util.Mensagem;

public class TelaVendas {
	
	
	public static void mostrar() {
		
		
			System.out.println();
			
			System.out.println(Mensagem.TELA_VENDAS);

			Pedido pedido = ControlePedidos.pedido;
			if (pedido == null) {
				pedido = new Pedido();
			} else {
											
				if (pedido.cliente != null) {
					System.out.println(pedido.cliente);
				}
				
				for (Produto produto : pedido.produtos) {
					System.out.println(produto);
				}
				System.out.println();
			}
			ControlePedidos.pedido = pedido;
			try (Scanner leitor = new Scanner(System.in)) {
			System.out.println(Mensagem.MSG_ESCOLHA);
			System.out.println("[1] " + Mensagem.MENU_SELECIONAR_CLIENTE);
			System.out.println("[2] " + Mensagem.MENU_SELECIONAR_PRODUTOS);
			System.out.println("[3] " + Mensagem.MENU_FINALIZAR_VENDA);
			System.out.println("[4] " + Mensagem.MENU_VOLTAR);

			Integer opcao = leitor.nextInt();

			switch (opcao) {
				case 1: {
					TelaVendas.selecionarCliente();
					break;
				}
				case 2: {
					TelaVendas.selecionarProdutos();
					break;
				}
				case 3: {
					TelaVendas.finalizarVenda();
					break;
				}
				case 4: {
					TelaPrincipalUsuario.mostrar();
					break;
				}
			}
		}
	}

	private static void selecionarCliente() {

		System.out.println();
		System.out.println(Mensagem.MSG_LISTA_DE_CLIENTES);

		if (BancoDeDados.clientes.isEmpty()) {
			System.out.println(Mensagem.MSG_NENHUM_CLIENTE);
		} else {
			for (Cliente cliente : BancoDeDados.clientes) {
				System.out.println(cliente);
			}
		}

		System.out.println();
		try (Scanner leitor1 = new Scanner(System.in)) {
			System.out.println(Mensagem.MSG_INFORME_NOME);
			String nome = leitor1.nextLine();

			if (!nome.isEmpty()) {
				Cliente cliente = CadastroClientes.localizar(nome);

				System.out.println();
				if (cliente != null) {
					ControlePedidos.pedido.cliente = cliente;
					System.out.println(Mensagem.MSG_CLIENTE_SELECIONADO);
				} else {
					System.out.println();
					System.out.println(Mensagem.MSG_CLIENTE_NAO_ENCONTRADO);
				}
				System.out.println();
				try (Scanner entrada = new Scanner(System.in)) {
					String input;
					
					
					do {
					    System.out.print("Pressione Enter para continuar: ");
					    input = entrada.nextLine();

					    if (!input.isEmpty()) {
					        System.out.println("Erro: entrada inválida!");
					    }
					} while (!input.isEmpty());
					TelaVendas.mostrar();
			}
			
}
		}
	}
	/*Carrinho carrinho = new Carrinho();
					
				    boolean continuarComprando = true;
				    
				    	    
				    while (continuarComprando) {
				        List<Produto> produtos = banco.getProdutos();
				        System.out.println("Lista de Produtos:");
				        for (Produto produto : produtos) {
				            System.out.println(produto.getNome() + " - " + produto.getMarca() + " - " + produto.getCodBarra() + " - R$" + produto.getValor());
				        }
				        
				        System.out.println("Informe o código do produto que deseja adicionar ao carrinho: ");
				        String codigo = leitor.nextLine();
				        Produto produto = banco.buscarProduto(codigo);
				        
				        if (produto == null) {
				            System.out.println("Produto não encontrado.");
				        } else {
				            carrinho.adicionar(produto);
				            System.out.println("Produto adicionado ao carrinho.");
				        }
				        System.out.println("Deseja adicionar mais produtos? (s/n)");
				        String resposta = leitor.nextLine();
				        if (!resposta.equalsIgnoreCase("s")) {
				            continuarComprando = false;
				        }
				    }
				    
				    if (carrinho.getProdutos().isEmpty()) {
				        System.out.println("Carrinho vazio.");
				    } else {
				        float valorTotal = carrinho.getValorTotal();
				        System.out.println("Valor total da compra: R$" + valorTotal);
				        System.out.println("Deseja confirmar a compra? (s/n)");
				        String confirmacao = leitor.nextLine();
				        if (confirmacao.equalsIgnoreCase("s")) {				        	
				        
				            // Finalizar compra
				            System.out.println("Compra finalizada com sucesso.");
				            int pontos = (int) (valorTotal/100 * 8);
				            System.out.println("O valor de R$" + valorTotal + " equivale a " + pontos + " pontos.");
				            
				            
				            //id aleatorio e dataDaCompra é data atual
				            Compra compra = new Compra(id , valor = valorTotal, cpf, dataDaCompra); 
				           				            
				        banco.adicionarCompra(compra);  
				        banco.adicionarPontuacao(pontuacao);    
				            
				        } else {
				            System.out.println("Compra cancelada.");
				        }
				    }
				    break;
			        
				    
				    case 4:
				    	Brinde brinde = new Brinde(); 
					    boolean trocarMais = true;
					    
					    System.out.println("Informe o número do cpf: "); 
					    String cpf3 = leitor.nextLine();
					    System.out.println();
					    ClienteCadastro.buscarCliente(cpf3) != null); {//uma regra que encontre o cpf na lista de clientes
					    
					    while (trocarMais) {
					        List<Brinde> brindes = banco.getBrindes();
					        System.out.println("Lista de Brindes:");
					        for (Brinde brinde : brindes) {
					            System.out.println(brinde.getNome() + " - " + brinde.getPonto() + " - ");
					        }
					        
					        System.out.println("Informe o nome do produto que deseja adicionar ao carrinho: ");
					        String nome = leitor.nextLine();
					        Brinde brinde = banco.buscarBrinde(nome);
					        
					        if (brinde == null) {
					            System.out.println("Produto não encontrado.");
					        } else {
					            carrinho.adicionarBrinde(brinde);
					            System.out.println("Produto adicionado ao carrinho.");
					        }
					        System.out.println("Deseja adicionar mais produtos? (s/n)");
					        String resposta1 = leitor.nextLine();
					        if (!resposta1.equalsIgnoreCase("s")) {
					            trocarMais = false;
					        }
					    }
					    
					    if (carrinho.getProdutos().isEmpty()) {
					        System.out.println("Carrinho vazio.");
					    } else {
					        int valorPonto = carrinho.getValorPonto();
					        System.out.println("Valor total de pontos: " + valorPonto);
					        System.out.println("Deseja confirmar a troca? (s/n)");
					        String confirmacao1 = leitor.nextLine();
					        if (confirmacao1.equalsIgnoreCase("s")) {				        	
					        
					            // Finalizar compra
					            System.out.println("Troca de pontos realizada com sucesso.");					            
					            System.out.println("O total de pontos trocados foram de " + valorPonto);
					            
					            
					            //será que precisa gerar a compra
					           // Compra compra = new Compra(id , valor = valorTotal, cpf, dataDaCompra); 
					           				            
					        //banco.adicionarCompra(compra);  
					        banco.removerPontuacao(pontuacao);    
					        
					        //colocar total de pontos restantes
					        //condicao para saldo de pontos insuficientes
					        
					            
					        } else {
					            System.out.println("Compra cancelada.");
					        }
					    }
					    break; 
				
					    }*/
	private static void selecionarProdutos() {
	    System.out.println();
	    System.out.println(Mensagem.MSG_LISTA_DE_PRODUTOS);

	    if (BancoDeDados.produtos.isEmpty()) {
	        System.out.println(Mensagem.MSG_NENHUM_PRODUTO);
	    } else {
	        BancoDeDados.produtos.forEach(System.out::println);
	    }

	    boolean continuarComprando = true;
	    try (Scanner leitor2 = new Scanner(System.in)) {
	        while (continuarComprando) {
	            System.out.println();
	            System.out.println(Mensagem.MSG_INFORME_NOME);
	            String nome = leitor2.nextLine();

	            if (!nome.isEmpty()) {
	                Produto produto = CadastroProduto.localizar(nome);

	                if (produto == null) {
	                    System.out.println();
	                    System.out.println("Produto não encontrado.");
	                } else {
	                    ControlePedidos.adicionar(produto);
	                    System.out.println(Mensagem.MSG_PRODUTO_SELECIONADO);
	                }

	                System.out.println("Deseja adicionar mais produtos? (s/n)");
	                String resposta = leitor2.nextLine();
	                if (!resposta.equalsIgnoreCase("s")) {
	                    continuarComprando = false;
	                }
	            }
	        }
	    }

	    if (BancoDeDados.pedidos.isEmpty()) {
	        System.out.println(Mensagem.MSG_NENHUM_PEDIDO);
	    } else {
	        BancoDeDados.pedidos.forEach(pedido -> System.out.println(pedido.toString()));
	    }

	    if (BancoDeDados.pedidos.isEmpty()) {
	        System.out.println("Carrinho vazio.");
	    } else {
	        double total = BancoDeDados.pedidos.stream().mapToDouble(Pedido::total).sum();
	        System.out.println("Valor total da compra: R$" + total);

	        try (Scanner leitor3 = new Scanner(System.in)) {
	            System.out.println("Deseja confirmar a compra? (s/n)");
	            String confirmacao = leitor3.nextLine();

	            if (confirmacao.equalsIgnoreCase("s")) {
	                System.out.println("Compra finalizada com sucesso.");
	            }
	        }
	    }

	    String ponto;
	    double total = BancoDeDados.pedidos.stream().mapToDouble(Pedido::total).sum();
	    System.out.println("O valor de R$" + total + " equivale a " + ponto + " pontos.");
	}
}

